/*
 * Copyright (C) 2008 Beelucid Software, LLC.
 * All rights reserved.
 *
 * The software in this package is published under the terms of the BSD
 * style license a copy of which is generated into the LICENSE.txt file.
 *
 * Created on June 20, 2008 by Megan Adams
 */
package ouput.beelucid; 
import ouput.beelucid.*;

import java.lang.reflect.Array; 

/**
 * <code>ArrayBridge</code> is a BeeLucid 'bridge class' which contains stubs and as well as some implementations for 
 * all Array methods, generated by default or identified in code. Uses reflection to implement Array functionality in the Java context.
 */
public class ArrayBridge {
    public ArrayBridge(Object  p0) {
        array = p0; 
    }
    private Object array = null; 
    /**
     * @return an ArrayBridge object containing an array
     * of specified dimension and type
     */
    public static ArrayBridge newInstance(Class  p0, int  p1, int  p2, int  p3) {
        int dims[] = new int[]{p1, p2, p3};
        Object array = Array.newInstance(p0, dims);
        return new ArrayBridge(array);
    }
    /**
     * @return an ArrayBridge object containing an array
     * of specified dimension and type
     */
    public static ArrayBridge newInstance(Class  p0, int  p1, int  p2) {
        int dims[] = new int[]{p1, p2};
        Object array = Array.newInstance(p0, dims);
        return new ArrayBridge(array);
    }
    /**
     * @return an ArrayBridge object containing an array
     * of specified dimension and type
     */
    public static ArrayBridge newInstance(Class  p0, int  p1) {
        int dims[] = new int[]{p1};
        Object array = Array.newInstance(p0, dims);
        return new ArrayBridge(array);
    }
    /**
     * @return an array of specified dimension and type
     */
    public static Object newInstanceArray(Class  p0, int  p1, int  p2, int  p3) {
        int dims[] = new int[]{p1, p2, p3};
        Object array = Array.newInstance(p0, dims);
        return array;
    }
    /**
     * @return an array of specified dimension and type
     */
    public static Object newInstanceArray(Class  p0, int  p1, int  p2) {
        int dims[] = new int[]{p1, p2};
        Object array = Array.newInstance(p0, dims);
        return array;
    }
    /**
     * @return an array of specified dimension and type
     */
    public static Object newInstanceArray(Class  p0, int  p1) {
        int dims[] = new int[]{p1};
        Object array = Array.newInstance(p0, dims);
        return array;
    }
    /**
     * @return the number of elements in the specified dimension of the array
     */
    public int getLength(int  p0) {
        return (this.getUpperBound(p0)+1);
    }
    /**
     * @return the total number of elements in all dimensions of the array
     */
    public int length() {
        int totalLen = 0;
        Object tmp = array;
        if (array != null && array.getClass().isArray()) {
            totalLen = Array.getLength(tmp);
            while (tmp != null && tmp.getClass().isArray()) {
                tmp = (Array.getLength(tmp) > 0) ? Array.get(tmp,0) : null;
                if (tmp != null && tmp.getClass().isArray()) {
                    totalLen *= Array.getLength(tmp);
                }
            }
        }
        return totalLen;
    }
    /**
     * @return number of array dimensions
     */
    public int rank() {
        int rank = 0;
        if (array != null && array.getClass().isArray()) {
            Object tmp = array;
            rank ++;
            while (tmp != null && tmp.getClass().isArray()) {
                tmp = (Array.getLength(tmp) > 0) ? Array.get(tmp,0) : null;
                if (tmp != null && tmp.getClass().isArray()) rank++;
            }
        }
        return rank;
    }
    /**
     * @return 0 as the lower bound for array at dimension specified by parameter.
     * Note 0 is always the lower bound in the Java context.
     */
    public int getLowerBound(int  p0) {
        return 0;
    }
    /**
     * @return upper bound for array at dimension specified by parameter.
     * Note zero is returned for invalid dimension.
     */
    public int getUpperBound(int  p0) {
        int upperBound = 0;
        Object arr = array;
        if (arr == null) return 0;
        if (p0 >= rank()) return 0;
        for (int i = 0; i <= p0; i++) {
            if (arr.getClass().isArray()) {
                upperBound = Array.getLength(arr)-1;
            }
            arr = (Array.getLength(arr) > 0) ? Array.get(arr,0) : null;
            if (arr == null || !arr.getClass().isArray()) break;
        }
        return upperBound;
    }
    /**
     * set the value at the specified indexed location in the array.
     */
    public void setValue(Object  p0, int  p1, int  p2, int  p3) {
        Object arr = array;
        if (arr == null) return;
        if (arr.getClass().isArray()) {
            arr = Array.get(arr,p1);
            if (!arr.getClass().isArray()) return;
        }
        if (arr.getClass().isArray()) {
            arr = Array.get(arr,p2);
            if (!arr.getClass().isArray()) return;
        }
        if (arr.getClass().isArray()) {
            Array.set(arr, p3, p0);
        }
    }
    /**
     * set the value at the specified indexed location in the array.
     */
    public void setValue(Object  p0, int  p1, int  p2) {
        Object arr = array;
        if (arr == null) return;
        if (arr.getClass().isArray()) {
            arr = Array.get(arr,p1);
            if (!arr.getClass().isArray()) return;
        }
        if (arr.getClass().isArray()) {
            Array.set(arr, p2, p0);
        }
    }
    /**
     * set the value at the specified indexed location in the array.
     */
    public void setValue(Object  p0, int  p1) {
        Object arr = array;
        if (arr == null) return;
        if (arr.getClass().isArray()) {
            Array.set(arr, p1, p0);
        }
    }
    /**
     * @return the value at the specified indexed location in the array.
     * Note null is returned for invalid index.
     */
    public Object getValue(int  p0, int  p1, int  p2) {
        Object arr = array;
        Object value = null;
        if (arr == null) return value;
        if (arr.getClass().isArray()) {
            arr = Array.get(arr,p0);
            if (arr == null || !arr.getClass().isArray()) return null;
        }
        if (arr.getClass().isArray()) {
            arr = Array.get(arr,p1);
            if (arr == null || !arr.getClass().isArray()) return null;
        }
        if (arr.getClass().isArray()) {
            value = Array.get(arr,p2);
        }
        return value;
    }
    /**
     * @return the value at the specified indexed location in the array.
     * Note null is returned for invalid index.
     */
    public Object getValue(int  p0, int  p1) {
        Object arr = array;
        Object value = null;
        if (arr == null) return value;
        if (arr.getClass().isArray()) {
            arr = Array.get(arr,p0);
            if (arr == null || !arr.getClass().isArray()) return null;
        }
        if (arr.getClass().isArray()) {
            value = Array.get(arr,p1);
        }
        return value;
    }
    /**
     * @return the value at the specified indexed location in the array.
     * Note null is returned for invalid index.
     */
    public Object getValue(int  p0) {
        Object arr = array;
        Object value = null;
        if (arr == null) return value;
        if (arr.getClass().isArray()) {
            value = Array.get(arr,p0);
        }
        return value;
    }
    /**
     * Clear an array.
     * @param p0 the array Object
     * @param p1 starting index for Clear
     * @param p2 length to clear.
     */
    public static void Clear(Object  p0, int  p1, int  p2) {
        if (!p0.getClass().isArray())
			return;
		ArrayBridge ab = new ArrayBridge(p0);
		Class c = ab.array.getClass().getComponentType();
		for (int i = p1; i < p2; i++) {
			if (c.isPrimitive()) {
				if  (c == boolean.class)
					ab.setValue(new Boolean(false), i);
				else if (c == char.class)
					ab.setValue(new Character('0'), i);
				else if (c == byte.class)
					ab.setValue(new Byte("0"), i);
				else if (c == short.class)
					ab.setValue(new Short((short) 0), i);
				else if (c == int.class)
					ab.setValue(new Integer(0), i);
				else if (c == long.class)
					ab.setValue(new Long(0), i);
				else if (c == float.class)
					ab.setValue(new Float(0), i);
				else if (c == double.class)
					ab.setValue(new Double(0), i);
				else ab.setValue(0,i);
			}
			else ab.setValue(null, i);
			}
    }
}
